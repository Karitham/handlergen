// Code generated by github.com/Karitham/handlergen. DO NOT EDIT.
package handlers

import (
	"net/http"
	"strconv"
	"strings"

	"github.com/go-chi/chi/v5"
)

func GetPetFindByTags(handler func(http.ResponseWriter, *http.Request, []string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		query_tags := query.Get("tags")
		tags := strings.Split(query_tags, ",")

		handler(
			w,
			r,
			tags,
		)
	}
}

func GetPetByPetId(handler func(http.ResponseWriter, *http.Request, int)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		query_petId := chi.URLParam(r, "petId")
		petId, err := strconv.Atoi(query_petId)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}

		handler(
			w,
			r,
			petId,
		)
	}
}

func PostPetByPetId(handler func(http.ResponseWriter, *http.Request, int, string, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		query_petId := chi.URLParam(r, "petId")
		petId, err := strconv.Atoi(query_petId)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}

		name := query.Get("name")

		status := query.Get("status")

		handler(
			w,
			r,
			petId,
			name,
			status,
		)
	}
}

func DeletePetByPetId(handler func(http.ResponseWriter, *http.Request, string, int)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		api_key := r.Header.Get("api_key")

		query_petId := chi.URLParam(r, "petId")
		petId, err := strconv.Atoi(query_petId)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}

		handler(
			w,
			r,
			api_key,
			petId,
		)
	}
}

func GetStoreInventory(handler func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		handler(
			w,
			r,
		)
	}
}

func PostStoreOrder(handler func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		handler(
			w,
			r,
		)
	}
}

func PostUser(handler func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		handler(
			w,
			r,
		)
	}
}

func PostUserCreateWithList(handler func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		handler(
			w,
			r,
		)
	}
}

func GetUserLogin(handler func(http.ResponseWriter, *http.Request, string, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		username := query.Get("username")

		password := query.Get("password")

		handler(
			w,
			r,
			username,
			password,
		)
	}
}

func GetPetFindByStatus(handler func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		status := query.Get("status")

		handler(
			w,
			r,
			status,
		)
	}
}

func GetUserByUsername(handler func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		username := chi.URLParam(r, "username")

		handler(
			w,
			r,
			username,
		)
	}
}

func PutUserByUsername(handler func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		username := chi.URLParam(r, "username")

		handler(
			w,
			r,
			username,
		)
	}
}

func DeleteUserByUsername(handler func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		username := chi.URLParam(r, "username")

		handler(
			w,
			r,
			username,
		)
	}
}

func PostPetByPetIdUploadImage(handler func(http.ResponseWriter, *http.Request, int, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		query_petId := chi.URLParam(r, "petId")
		petId, err := strconv.Atoi(query_petId)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}

		additionalMetadata := query.Get("additionalMetadata")

		handler(
			w,
			r,
			petId,
			additionalMetadata,
		)
	}
}

func GetStoreOrderByOrderId(handler func(http.ResponseWriter, *http.Request, int)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		query_orderId := chi.URLParam(r, "orderId")
		orderId, err := strconv.Atoi(query_orderId)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}

		handler(
			w,
			r,
			orderId,
		)
	}
}

func DeleteStoreOrderByOrderId(handler func(http.ResponseWriter, *http.Request, int)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		query_orderId := chi.URLParam(r, "orderId")
		orderId, err := strconv.Atoi(query_orderId)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}

		handler(
			w,
			r,
			orderId,
		)
	}
}

func GetUserLogout(handler func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		handler(
			w,
			r,
		)
	}
}

func PutPet(handler func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		handler(
			w,
			r,
		)
	}
}

func PostPet(handler func(http.ResponseWriter, *http.Request)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		handler(
			w,
			r,
		)
	}
}
