// Code generated by github.com/Karitham/handlergen. DO NOT EDIT.
package main

import (
	"encoding/json"
	"net/http"
	"strconv"
	"strings"

	"github.com/go-chi/chi/v5"
)

type errorHandler = func(w http.ResponseWriter, r *http.Request, err error)

var defaultErrHandler = func(w http.ResponseWriter, r *http.Request, err error) {
	http.Error(w, "invalid payload", 400)
}

type Main interface {
	PostPet(http.ResponseWriter, *http.Request, json.RawMessage)
	PutPet(http.ResponseWriter, *http.Request, json.RawMessage)
	GetPetFindByStatus(http.ResponseWriter, *http.Request, string)
	GetStoreOrderByOrderId(http.ResponseWriter, *http.Request, int)
	DeleteStoreOrderByOrderId(http.ResponseWriter, *http.Request, int)
	GetPetFindByTags(http.ResponseWriter, *http.Request, []string)
	GetPetByPetId(http.ResponseWriter, *http.Request, int)
	PostPetByPetId(http.ResponseWriter, *http.Request, int, string, string)
	DeletePetByPetId(http.ResponseWriter, *http.Request, string, int)
	PostPetByPetIdUploadImage(http.ResponseWriter, *http.Request, int, string)
	GetUserLogin(http.ResponseWriter, *http.Request, string, string)
	GetUserByUsername(http.ResponseWriter, *http.Request, string)
	PutUserByUsername(http.ResponseWriter, *http.Request, string)
	DeleteUserByUsername(http.ResponseWriter, *http.Request, string)
}

func PostPet(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var body json.RawMessage
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			if errHandler == nil {
				defaultErrHandler(w, r, err)
				return
			}
			errHandler[0](w, r, err)
			return
		}
		h.PostPet(
			w,
			r,
			body,
		)
	}
}

func PutPet(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var body json.RawMessage
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			if errHandler == nil {
				defaultErrHandler(w, r, err)
				return
			}
			errHandler[0](w, r, err)
			return
		}
		h.PutPet(
			w,
			r,
			body,
		)
	}
}

func GetPetFindByStatus(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		Status := query.Get("status")

		h.GetPetFindByStatus(
			w,
			r,
			Status,
		)
	}
}

func GetStoreOrderByOrderId(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		queryOrderId := chi.URLParam(r, "orderId")
		OrderId, err := strconv.Atoi(queryOrderId)
		if err != nil {
			if errHandler == nil {
				defaultErrHandler(w, r, err)
				return
			}
			errHandler[0](w, r, err)
			return
		}

		h.GetStoreOrderByOrderId(
			w,
			r,
			OrderId,
		)
	}
}

func DeleteStoreOrderByOrderId(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		queryOrderId := chi.URLParam(r, "orderId")
		OrderId, err := strconv.Atoi(queryOrderId)
		if err != nil {
			if errHandler == nil {
				defaultErrHandler(w, r, err)
				return
			}
			errHandler[0](w, r, err)
			return
		}

		h.DeleteStoreOrderByOrderId(
			w,
			r,
			OrderId,
		)
	}
}

func GetPetFindByTags(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		queryTags := query.Get("tags")
		Tags := strings.Split(queryTags, ",")

		h.GetPetFindByTags(
			w,
			r,
			Tags,
		)
	}
}

func GetPetByPetId(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		queryPetId := chi.URLParam(r, "petId")
		PetId, err := strconv.Atoi(queryPetId)
		if err != nil {
			if errHandler == nil {
				defaultErrHandler(w, r, err)
				return
			}
			errHandler[0](w, r, err)
			return
		}

		h.GetPetByPetId(
			w,
			r,
			PetId,
		)
	}
}

func PostPetByPetId(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		queryPetId := chi.URLParam(r, "petId")
		PetId, err := strconv.Atoi(queryPetId)
		if err != nil {
			if errHandler == nil {
				defaultErrHandler(w, r, err)
				return
			}
			errHandler[0](w, r, err)
			return
		}
		Name := query.Get("name")
		Status := query.Get("status")

		h.PostPetByPetId(
			w,
			r,
			PetId,
			Name,
			Status,
		)
	}
}

func DeletePetByPetId(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		ApiKey := r.Header.Get("api_key")
		queryPetId := chi.URLParam(r, "petId")
		PetId, err := strconv.Atoi(queryPetId)
		if err != nil {
			if errHandler == nil {
				defaultErrHandler(w, r, err)
				return
			}
			errHandler[0](w, r, err)
			return
		}

		h.DeletePetByPetId(
			w,
			r,
			ApiKey,
			PetId,
		)
	}
}

func PostPetByPetIdUploadImage(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		queryPetId := chi.URLParam(r, "petId")
		PetId, err := strconv.Atoi(queryPetId)
		if err != nil {
			if errHandler == nil {
				defaultErrHandler(w, r, err)
				return
			}
			errHandler[0](w, r, err)
			return
		}
		AdditionalMetadata := query.Get("additionalMetadata")

		h.PostPetByPetIdUploadImage(
			w,
			r,
			PetId,
			AdditionalMetadata,
		)
	}
}

func GetUserLogin(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		Username := query.Get("username")
		Password := query.Get("password")

		h.GetUserLogin(
			w,
			r,
			Username,
			Password,
		)
	}
}

func GetUserByUsername(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		Username := chi.URLParam(r, "username")

		h.GetUserByUsername(
			w,
			r,
			Username,
		)
	}
}

func PutUserByUsername(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		Username := chi.URLParam(r, "username")

		h.PutUserByUsername(
			w,
			r,
			Username,
		)
	}
}

func DeleteUserByUsername(h Main, errHandler ...errorHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		Username := chi.URLParam(r, "username")

		h.DeleteUserByUsername(
			w,
			r,
			Username,
		)
	}
}
