// Code generated by github.com/Karitham/handlergen. DO NOT EDIT.
package handlers

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/Karitham/handlergen/gen"
	"github.com/go-chi/chi/v5"
)

func example1(handler func(w http.ResponseWriter, r *http.Request, Page uint, body gen.Template)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		queryPage := query.Get("page")
		Page64, err := strconv.ParseUint(queryPage, 10, 64)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
		Page := uint(Page64)

		var body gen.Template
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			http.Error(w, "invalid body", 400)
			return
		}

		handler(
			w,
			r,
			Page,
			body,
		)
	}
}

func example2(handler func(w http.ResponseWriter, r *http.Request, User string, UserId uint, Page, PerPage int)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		User := query.Get("user")
		queryUserId := query.Get("user_id")
		UserId64, err := strconv.ParseUint(queryUserId, 10, 64)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
		UserId := uint(UserId64)
		queryPage := query.Get("page")
		Page, err := strconv.Atoi(queryPage)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
		queryPerPage := query.Get("per_page")
		PerPage, err := strconv.Atoi(queryPerPage)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}

		handler(
			w,
			r,
			User,
			UserId,
			Page,
			PerPage,
		)
	}
}

func example3(handler func(w http.ResponseWriter, r *http.Request, Page, PerPage int, User, ApiToken string, UserId int)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()
		queryPage := query.Get("page")
		Page, err := strconv.Atoi(queryPage)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
		queryPerPage := query.Get("per_page")
		PerPage, err := strconv.Atoi(queryPerPage)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}
		User := query.Get("user")
		ApiToken := r.Header.Get("api_token")
		queryUserId := chi.URLParam(r, "user_id")
		UserId, err := strconv.Atoi(queryUserId)
		if err != nil {
			http.Error(w, "invalid query", 400)
			return
		}

		handler(
			w,
			r,
			Page,
			PerPage,
			User,
			ApiToken,
			UserId,
		)
	}
}
